# -*- coding: utf-8 -*-
"""RandomForest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19ZaS9axtwR_5R4KIlm1xD5FAqwYXzwU5
"""

import os
import time
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.model_selection import ShuffleSplit, KFold

# train = pd.read_csv("C:/Users/swl3guest/CE4032/datasets/train_modified_v2.csv")
# test = pd.read_csv("C:/Users/swl3guest/CE4032/datasets/test_modified_v2.csv")

train_df = pd.read_csv("../datasets/modified_train_v3.csv")
test_df = pd.read_csv("../datasets/modified_test_v3.csv")
ids = test_df['TRIP_ID']
train_df.head()

train_df['DURATION'] = train_df['DURATION'] / 15
y= np.log(train_df['DURATION']) + 1
train_cl = train_df.drop(columns=['TRIP_ID','TIMESTAMP','DATE', 'END_TIME',  'DURATION', 'ORIGIN_CALL',	'ORIGIN_STAND'])
test_cl= test_df.drop(columns=[ 'TRIP_ID','TIMESTAMP','DATE', 'END_TIME', 'ORIGIN_CALL',	'ORIGIN_STAND'])
train_cl.head()

test_cl.head()

train = train_cl

test = test_cl
feature_names = list(train.columns)

X = np.array(train, dtype=np.float)
X_test = np.array(test, dtype=np.float)

clf = GradientBoostingRegressor(n_estimators=10, learning_rate = 0.15, max_depth=3, max_features = 15, min_weight_fraction_leaf = 0.15, random_state=21, verbose = 1)
clf.fit(X, y)

logytest = clf.predict(X_test)
ytest = (np.exp(logytest) -1 )
print('Test shape OK.') if test.shape[0] == ytest.shape[0] else print('Oops')
result= pd.DataFrame({"TRIP_ID": test_df["TRIP_ID"], "TRAVEL_TIME": ytest*15})
result.to_csv("../datasets/gradient_boost.csv", index=False)

print('training a random forest regressor ...')
# Initialize the famous Random Forest Regressor from scikit-learn
clf = RandomForestRegressor(n_estimators=10, max_depth = 3, min_weight_fraction_leaf= 0.15, max_features = 15, n_jobs=-1, random_state=21,verbose = 1)
clf.fit(X, y)

logytest = clf.predict(X_test)
ytest = (np.exp(logytest) -1 )
print('Test shape OK.') if test.shape[0] == ytest.shape[0] else print('Oops')
result= pd.DataFrame({"TRIP_ID": test_df["TRIP_ID"], "TRAVEL_TIME": ytest*15})
result.to_csv("../datasets/random_forest.csv", index=False)